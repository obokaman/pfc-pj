Hola David.

Estas son algunas de las cosas que hemos comentado, y que es necesario que hagas:

En la base de datos:

Añadir a la tabla user:
  * bool activated (por defecto, falso)
  * varchar(20) activation_key



Funciones de php. Todas tus funciones de php se acceden del siguiente modo:
  * Te llaman a main.php
  * Recibiras uno o mas parametros. El primer parametro siempre es "function="
 y el nombre de funcion.
  * Por ejemplo, para llamarte a la funcion:

  login(nick, password) returns int:

  te llamaran a

  http://localhost/php/main.php?function=login&nick=pepito&passwork=lapiz


Estas son las funciones. Cuando hay que devolver alguna cosa, tienes que hacerlo
por JSON (como ya hicieramos el otro dia). Siempre tienes que comprobar que todos los
datos tienen sentido (por ejemplo: si un parametro debe ser un numero positivo,
tienes que comprobar que te estan pasando un int, y que este es positivo, etc.). Para
ello, lo mejor es que te hagas funciones de comprobacion de cada tipo de parametro;
busca informacion sobre "sanitize php" (esto es, filtrar los datos que te pasan para
comprobar que no te esten colando cosas en la base de datos como "); DROP TABLE user"
como nombre de usuario, etc.)

==========================
 
login(nick, password) returns int:
  * 0 si nick y password son correctos  (PHP_SESSION entra en modo LOGIN)
  * 1 si nick no existe, o password es incorrecto
  * 2 si nick y password son correctos, pero no esta activado (activated=0)

==========================

newUser(nick, name, surname1, surname2, email_user, city,
        school, email_school, password) returns int:
  * 0 si no hay problema: nuevo usuario, generar activation_key (y hay que enviar
    un e-mail, pero ya nos preocuparemos otro dia de esto). No se entra en LOGIN.
  * 1 nick ya existe
  * 2 algun otro error relativo con los datos (codificacion, muy largo,
  NULLs, etc.)

==========================
 
getUser(nick) return user (array con algunos campos de un user)
  * retorna informacion del nick si estas logeado:
   - si eres tu mismo, lo devuelves todo (excepto el password)
   - si es otra persona, devuelves el nick, el name, city y school.
  * si no estas logeado, retorna user vacio

==========================

changeUser(name, surname1, surname2, email_user, city,
        school, email_school, oldpassword, password) returns int:
  * 1 si no estamos en modo LOGIN (error)
  * 2 si "oldpassword" no es correcto (respecto al nick que esta logeado)
  * 0 si no hay problema: podemos cambiar los datos (incluyendo el password)

!!!! si no ha cambiado el password el campo password sera null y por tanto cualquier valor que pueda tener oldpassword dara igual

==========================

getMyTeams(circuit, championship) returns strings[]
  * Nada si no estamos logeados.
  * Los 'name' de los equipos a los que el usuario pertenece
  * Championship puede ser vacio y entonces solo filtra teams con circuit 

==========================

getMyChampionships(String circuit) returns strings[]
  * Nada si no estamos logeados.
  * Los 'name' de los championships a los que el usuario pertenece y contienen el circuit
  !!! si circuit = "" devuelve todos los championships a los que el usuario pertenece sin restricciones de circuito

==========================

getCircuits()
  * No es necesario estar logeado.
  * Los 'name' de todos los circuitos que existen.

==========================

getRankings(circuit, team, championship, page, sizepage)
  * no es necesario estar logeado
  * circuito, page o sizepage no es NULL, pero team, championship pueden ser NULL
  * si team o championship es NULL, no hay que filtrar por team o championship
  * si page 0: hay que buscar en que pagina pertenece el nick logeado,
  y devolverla; si no esta logeado, hay que devolver la primera pagina.
  * si page!=0, hay que devolver la pagina que se pide.
  * las paginas van de 1 a sizepage; sizepage+1 a 2*sizepage, etc... si sizepage=0,
  devuelve el sizepage por defecto (50)

  devuelve: un array con tres campos:
    page: devuelve el numero de pagina devuelta
    numpages: devuelve el total de paginas que hay en la base de datos
    data: un listado de (como mucho) 'sizepage' pares 'nick', 'tiempo', correspondientes
  a la pagina 'page'

==========================


Esta es una funcion especial: no devuelve JSON, sino que devuelve HTML. (El motivo
es que no funcina a traves de la UI de GWT, sino que se llama directamente; ya te lo
explicaremos otro dia).


activate(nick, activation_key) returns HTML
  * Si nick no existe, o esta ya activado, o activation key erroneo: devuelve
  HTML explicando el error
  * Si nick existe, no esta activado, y activation_key coincide, entonces
   - activated pasa a valer cierto
   - muestra pagina web con el texto "Has sido activado. En cinco segundos te
   redirigimos a la pagina web de inicio" (y que lo haga).

===================================================

newChampionship (name, date_limit, circuits[])
  * Se crea un nuevo campeonato con nombre name, fecha limite date_limit y contiene los circuitos del array de strings circuits[]
  * 0: creado con exito
  * 1: nombre de campeonato ya existe
  * 2: otros errores

newTeam (name)
  * Se crea un nuevo equipo al que solo pertenecera el usuario logeado de momento
  * 0: creado con exito
  * 1: ya existe equipo con ese nombre
  * 2: otros errores

getMyOwnChampionships() returns strings[]   //OJO! dijimos que nos serviria con el otro getMyChampionships pasandole circuit = null pero no es del todo cierto porque el getMyChampionships original retorna los champeonatos a los que pertenece el usuario y en cambio esta tiene que retornar los campeonatos de los que el usuario sea el propietario
  * Nada si no estamos logeados.
  * Los 'name' de los championships de los que el usuario es propietario

getMyOwnTeams() returns strings[]   //OJO! igual que en la anterior
  * Nada si no estamos logeados.
  * Los 'name' de los equipos de los que el usuario es propietario

getAllNicks() returns strings[]
  *devuelve todos los nicks existentes en la base de datos

addPlayerToChampionship(name, nick)
  * crea una invitación pendiente de confirmar del usuario 'nick' en el campeonato 'name'
  * 0: creado con exito
  * 1: ya existe la invitacion
  * 2: no existe el nick introducido
  * 3: otros errores

addPlayerToTeam(name, nick)
  * crea una invitación pendiente de confirmar del usuario 'nick' en el equipo 'name'
  * 0: creado con exito
  * 1: ya existe la invitacion
  * 2: no existe el nick introducido
  * 3: otros errores

getNInvitations() return nChamps, nTeams
  * nChamps: numero de invitaciones a campeonatos hechas al usuario logeado que estan pendientes de confirmar/rechazar
  * nTeams: numero de invitaciones a equipos hechas al usuario logeado que estan pendientes de confirmar/rechazar 

getChampionshipsInvited() return {nick, name}[]
  * retorna informacion sobre todas las invitaciones a campeonatos hechas al usuario logeado que estan pendientes de confirmar/rechazar:
     - nick: usuario que ha realizado la invitación (propietario del campeonato)
     - name: nombre del campeonato al que ha sido invitado el usuario logeado

getTeamsInvited() return {nick, name}[]
  * retorna informacion sobre todas las invitaciones a equipos hechas al usuario logeado que estan pendientes de confirmar/rechazar:
     - nick: usuario que ha realizado la invitación (propietario del equipo)
     - name: nombre del equipo al que ha sido invitado el usuario logeado

setChampionshipAnswer(name, answer)
  * answer = 1: el usuario logeado acepta la invitacion al campeonato 'name' (la invitacion deja de estar pendiente)
  * answer = 0: el usuario logeado rechaza la invitacion al campeonato 'name' (la invitacion se borra de la BD)

setTeamAnswer(name, answer)
  * answer = 1: el usuario logeado acepta la invitacion al equipo 'name' (la invitacion deja de estar pendiente)
  * answer = 0: el usuario logeado rechaza la invitacion al equipo 'name' (la invitacion se borra de la BD)

=========================================================================

saveCode(String code, String name)
  * 0: ok. se ha guardado el code con el nombre name para el usuario logeado en la fecha actual
  * 1: ya existe el nombre (?? o no avisa y sobreescribe?)
  * 2: otros errores

loadCode(String name) return String
  * retorna un string correspondiente al codigo guardado por el usuario logeado bajo el nombre name

getSavedCodes() return (String name, String date)[]
  * devuelve el name de todos los codigos guardados por el usuario y la fecha en que fue guardado

==========================================================================

getCarImage (width, height)
  * retorna string con el nombre de la imagen (para el url donde habrá q recogerla)


getCircuitInfo (string name)
  * retorna una array de 5 elementos donde los indices de las posiciones son url, width, height, level, n_laps. La informacion que hay en estas 5 posiciones proviene de la base de datos del circuito con el mismo nombre que name


getTraceFragment(int id_game, int start_byte, int length) return {int read_bytes, string data}
  * retorna una fragmento del codigo de una partida con identificador igual a id_game y los bytes leidos de ese fragmento, el fragmento de codigo que retornaremos empieza desde el byte start_byte y length indica el tamaño que leeremos a partir de ese byte.
	- read_bytes: numero de bytes leidos 
	- data: contenido del fragmento extraido
En caso del byte de inicio sea incorrecto, por ejemplo que el start_byte sea mas grande que el tamaño del propio fichero que queremos leer, los read_bytes=0 y data=""


getFullFragment(int id_game) return {int read_bytes, string data}
  * Hace exactamente lo  mismo que la funcion getFragmentTrace, lo que retorna todo el contenido del codigo de una partida. El objeto que devuelve tb es el mismo


run(json code, string circuit)
  * Esta función ejecuta el codigo en el circuito con el nombre igual a circuit y devuelve unos resultados en caso de exito o error. De momento para esta funcion es necesario que haya un usuario logueado
  En caso de error retorna:
 	- code: codigo del error, sera < 0
	- message: mensaje del error de compilacion
  En caso de exito, a parte de devolver los valores necesarios al cliente, añade la nueva partida en la base de datos y crea un directorio en el servidor con todo los archivos de la ejecucion de la partida junto con los resultados:
	- code: codigo del error, en este caso sera igual a 0
	- message : Sera un simple "Ok"
	- id_game: identificador de la partida con el codigo pasado por la entrada

======================================================================
  
getChampionshipInfo (string name)
 * retorna un array de strings que son los nombres de los circuitos que contiene el championship "name"
